setwd("C:/Users/jmarrero/R_Projects")
getwd()
setwd("FB_Dashboard")
dir()
shiny::runApp()
install.packages("lubridate")
shiny::runApp()
?month
runApp()
hd <- read.csv("data/fb_post_data.csv", nrows = 1)
df <- read.csv("data/fb_post_data.csv", skip = 2, stringsAsFactors = FALSE)
colnames(df) <- colnames(hd)
dfTimeParts <- timeClean(df$Posted)
df2 <- df[1:46]
df2$Posted <- as.Date(dfTimeParts$V1, format = "%m/%d/%Y")
df2$Time <- dfTimeParts$V2
df2$AMPM <- dfTimeParts$V3
day <- weekdays(df2$Posted)
df2$Weekday <- day
month(df2$Posted)
month(as.Date(df2$Posted))
str(df2)
dfTime <- df2$Posted
dfTimeParts <- t(as.data.frame(strsplit(as.character(dfTime),' ')))
dfTimeParts <- as.data.frame(dfTimeParts)
dfTimeParts$V4 <- month(dfTimeParts$V1)
runApp()
dfTime <- df$Posted
dfTimeParts <- t(as.data.frame(strsplit(as.character(dfTime),' ')))
dfTimeParts <- as.data.frame(dfTimeParts)
str(df)
str(dfTimeParts)
dfTimeParts$V1 <- as.Date(dfTimeParts$V1, format = "%m/%d/%Y")
dfTimeParts$V4 <- month(dfTimeParts$V1)
dfTimeParts$V4
dfTimeParts$V4 <- month(dfTimeParts$V1, label = TRUE)
dfTimeParts$V4
runApp()
runApp()
runApp()
hd <- read.csv("data/fb_post_data.csv", nrows = 1)
df <- read.csv("data/fb_post_data.csv", skip = 2, stringsAsFactors = FALSE)
colnames(df) <- colnames(hd)
dfTimeParts <- timeClean(df$Posted)
df2 <- df[1:46]
df2$Posted <- as.Date(dfTimeParts$V1, format = "%m/%d/%Y")
df2$Time <- dfTimeParts$V2
df2$AMPM <- dfTimeParts$V3
df2$Month <- dfTimeParts$V4
df2$Weekday <- dfTimeParts$V5
str(df2)
runApp()
shiny::runApp()
shiny::runApp()
df <- read.csv("data/fb_test_datapage.csv", skip = 2, stringsAsFactors = FALSE)
shiny::runApp()
shiny::runApp()
timeClean(df)
timeClean(df$Posted)
names(df[,1:10])
x <- getPageData()
y <- getPostData()
names(y)
names(x)
names(x[,1:10])
shiny::runApp()
summary(x$Date)
x$Date
shiny::runApp()
shiny::runApp()
shiny::runApp()
tapply(x$Daily.New.Likes, month(post$Date), sum)
tapply(x$Daily.New.Likes, month(x$Date), sum)
tapply(x$Daily.New.Likes, month(x$Date, label = TRUE), sum)
```
shiny::runApp()
getwd()
tw <- read.csv("data/fb_post_data.csv")
names(tw)
tw <- read.csv("data/twitter_test_data.csv")
names(tw)
str(tw)
tw$time
summary(tw)
sum(tw$url.clicks)
shiny::runApp()
---
title: "Data Analysis Notes: Facebook Dashboard"
author: "Jonathan L Marrero"
output: html_document
---
```{r echo=FALSE}
require(ggplot2)
source("timeClean.R")
source("getData.R")
require(lubridate)
# if (getwd() != "/Users/Marrero/Downloads") {
#  setwd("Downloads")
# }
pageDataPath <- "data/fb_test_datapage.csv"
postDataPath <- "data/fb_post_data.csv"
## Splitting the date and time into separate parts
post <- getPostData(postDataPath)
page <- getPageData(pageDataPath)
postTimeParts <- timeClean(post$Posted)
page$Date <- as.Date(page$Date)
post <- post[1:46]
post$Posted <- as.Date(postTimeParts$V1, format = "%m/%d/%Y")
post$Time <- postTimeParts$V2
post$AMPM <- postTimeParts$V3
post$Month <- postTimeParts$V4
post$Weekday <- postTimeParts$V5
```
Total number of people who engaged with our posts:
```{r echo=FALSE}
n1 <- sum(post$Lifetime.Post.Total.Reach)
n1
```
Number of engagements by post type:
```{r echo=FALSE}
tapply(post$Lifetime.Engaged.Users, post$Type, FUN = sum)
barplot(tapply(post$Lifetime.Engaged.Users, post$Type, sum))
```
The number of our followers reached by our post:
```{r echo=FALSE}
n2 <- sum(post$Lifetime.Post.reach.by.people.who.like.your.Page)
n2
```
How many times do we post in the morning compared to the evening?
```{r echo=FALSE}
barplot(table(post$AMPM))
```
How many people did we reach by post type?
```{r echo=FALSE}
tapply(post$Lifetime.Post.Total.Reach, post$Type, FUN=sum)
```
How many people did we reach in the morning, afternoon, and evening?
```{r echo=FALSE}
tapply(post$Lifetime.Post.Total.Reach, post$AMPM, FUN=sum)
barplot(tapply(post$Lifetime.Post.Total.Reach, post$AMPM, FUN=sum)/1000, ylab = "Post Reach x 1,000", main = "Reach by Time of Day", col = "skyblue")
```
Total posts by AM or PM:
```{r echo=FALSE}
barplot(table(post$AMPM))
```
Total posts by weekday:
```{r echo=FALSE}
table(post$Weekday)
barplot(table(post$Weekday))
```
Reach by weekday:
```{r echo=FALSE}
tapply(post$Lifetime.Post.Total.Reach, post$Weekday, FUN=sum)
barplot(tapply(post$Lifetime.Post.Total.Reach, post$Weekday, FUN=sum)/1000)
```
Average reach in the AM and PM:
```{r echo=FALSE}
barplot(tapply(post$Lifetime.Post.Total.Reach, post$AMPM, mean)/1000)
```
Total number of links clicked: (i.e., traffic generated)
```{r echo=TRUE}
sum(post$Lifetime.Post.consumers.by.type...link.clicks, na.rm = TRUE)
```
Total posts by month:
```{r echo=FALSE}
table(post$Month)
barplot(table(post$Month))
```
Total number of new likes by month:
```{r echo=FALSE}
tapply(page$Daily.New.Likes, month(page$Date, label = TRUE), sum)
barplot(tapply(page$Daily.New.Likes, month(page$Date, label = TRUE), sum))
```
page$Date
str(page)
post$Posted
page <- getPageData(pageDataPath)
str(page$Date)
table(month(page$Date, label = TRUE))
tw <- read.csv(twitter_test_data.csv)
shiny::runApp()
pageDataPath <- "data/fb_test_datapage.csv"
postDataPath <- "data/fb_post_data.csv"
twDataPath <- "twitter_test_data.csv"
post <- getPostData(postDataPath)
page <- getPageData(pageDataPath)
tw <- read.csv(twDataPath)
pageDataPath <- "data/fb_test_datapage.csv"
postDataPath <- "data/fb_post_data.csv"
twDataPath <- "data/twitter_test_data.csv"
post <- getPostData(postDataPath)
page <- getPageData(pageDataPath)
tw <- read.csv(twDataPath)
tw$time
shiny::runApp()
twTweetTimeClean(tw$time)
ts <- twTweetTimeClean(tw$time)
names(ts)
ts$V1
head(tw$time)
ts <- twTweetTimeClean(tw$time)
names(ts)
ts$V1
ts$V2
str(tw)
as.character(tw$time)
dfTimeParts <- t(as.data.frame(strsplit(as.character(tw$time),' ')))
head(dfTimeParts)
names(dfTime)
names(dfTimeParts)
as.data.frame(dfTimeParts)
head(as.data.frame(dfTimeParts))
dfTimeParts <- as.data.frame(dfTimeParts)
str(dfTimeParts)
dfTimeParts
head(dfTimeParts)
as.Date(dfTimeParts$V1)
dfTimeParts$V1 <- as.Date(dfTimeParts$V1, format = "%Y-%m-%d")
dfTimeParts$V4 <- month(dfTimeParts$V1, label = TRUE)
dfTimeParts$V5 <- weekdays(dfTimeParts$V1)
head(dfTimeParts)
twTimeParts <- twTweetTimeClean(tw$time)
head(twTimeParts)
dfTimeParts <- t(as.data.frame(strsplit(as.character(tw$time),' ')))
dfTimeParts <- as.data.frame(dfTimeParts)
dfTimeParts$V1 <- as.Date(dfTimeParts$V1, format = "%Y-%m-%d")
dfTimeParts$V4 <- month(dfTimeParts$V1, label = TRUE)
dfTimeParts$V5 <- weekdays(dfTimeParts$V1)
head(dfTimeParts)
twTimeParts <- twTweetTimeClean(tw$time)
head(twTimeParts)
str(twTimeParts)
str(dfTimeParts)
tw
tw$time
twTweetTimeClean(tw$time)
twTweetTimeClean(tw$time)
fbPostTimeClean(post$Posted)
tw$time
fbPostTimeClean(tw$time)
head(tw$time)
names(tw$time)
str(tw$time)
str(as.character(tw$time))
dfTimeParts <- t(as.data.frame(strsplit(as.character(tw$time),' ')))
dfTimeParts <- as.data.frame(dfTimeParts)
head(dfTimeParts)
dfTimeParts <- as.data.frame(dfTimeParts)
head(dfTimeParts)
dfTimeParts$V1 <- as.Date(dfTimeParts$V1, format = "%Y-%m-%d")
head(dfTimeParts)
dfTimeParts$V4 <- month(dfTimeParts$V1, label = TRUE)
dfTimeParts$V5 <- weekdays(dfTimeParts$V1)
str(dfTimeParts)
twTweetTimeClean(tw$time)
twTweetTimeClean(post$Posted)
twTweetTimeClean(post$Posted)
twTweetTimeClean(tw$time)
